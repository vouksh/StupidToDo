// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StupidToDo.Data;

namespace StupidToDo.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("StupidToDo.Records.ToDo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssignedListID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DoReminder")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Edited")
                        .HasColumnType("TEXT");

                    b.Property<int>("Frequency")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastRepeat")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RemindDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RemindTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RepeatEvery")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RepeatOnDay")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Repeats")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("AssignedListID");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AssignedListID = 1,
                            Body = "{\\rtf1\\ansi\\ansicpg1252\\deff0\\nouicompat\\deflang1033{\\fonttbl{\\f0\\fnil\\fcharset0 Segoe UI;}{\\f1\\fnil Segoe UI;}}\r\n{\\colortbl ;\\red255\\green128\\blue0;\\red0\\green128\\blue0;\\red0\\green0\\blue255;\\red255\\green0\\blue128;\\red255\\green0\\blue0;\\red128\\green0\\blue255;\\red0\\green0\\blue0;}\r\n{\\*\\generator Riched20 10.0.19041}\\viewkind4\\uc1 \r\n\\pard\\b\\f0\\fs18 Bold\\par\r\n\\b0\\i Italic\\par\r\n\\ul\\i0 Underline\\par\r\n\\b Bold Underline\\par\r\n\\i Bold Underline Italic\\par\r\n\\cf1\\ulnone\\b0\\i0 P\\cf2 r\\cf3 et\\cf4 t\\cf5 y \\cf6\\b COLORS\\par\r\n{\\cf7\\b0{\\field{\\*\\fldinst{HYPERLINK http://www.google.com/ }}{\\fldrslt{http://www.google.com/\\ul0\\cf0}}}}\\cf7\\b0\\f0\\fs18  Even hyperlinks!\\cf0\\f1\\par\r\n}\r\n",
                            Completed = false,
                            Created = new DateTime(2020, 11, 18, 13, 38, 2, 477, DateTimeKind.Local).AddTicks(4995),
                            DoReminder = false,
                            Frequency = 5,
                            RepeatOnDay = 0,
                            Repeats = false,
                            Title = "Do something"
                        });
                });

            modelBuilder.Entity("StupidToDo.Records.ToDoList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Lists");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Default"
                        });
                });

            modelBuilder.Entity("StupidToDo.Records.ToDo", b =>
                {
                    b.HasOne("StupidToDo.Records.ToDoList", "AssignedList")
                        .WithMany("ToDos")
                        .HasForeignKey("AssignedListID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedList");
                });

            modelBuilder.Entity("StupidToDo.Records.ToDoList", b =>
                {
                    b.Navigation("ToDos");
                });
#pragma warning restore 612, 618
        }
    }
}
